/**
 * citySelect
 * v-1.0.3
 * author：lquan
 * https://github.com/lquan529/citySelect
 */

(function (c, a) {
    var d = {};

    function b(f, e) {
        this.options = c.extend({}, b.defaults, f);
        this.$selector = c(e);
        this.multiSelectResult = [];
        this.multiSelectResultId = [];
        this.provinceId = [];
        this.whole = [];
        this.values = [];
        this.selectIndex = 0;
        this.isfocus = true;
        this.init()
    }

    b.defaults = {
        dataJson: null,
        convert: true,
        whole: false,
        shorthand: false,
        search: true,
        multiSelect: false,
        multiMaximum: 5,
        multiType: 0,
        mosaic: ",",
        placeholder: "请选择城市",
        searchPlaceholder: "输入关键词搜索",
        hotCity: [],
        onInit: function () {
        },
        onForbid: function () {
        },
        onTabsAfter: function (e) {
        },
        onTabsForbid: function (e) {
        },
        onCallerAfter: function (f, e) {
        }
    };
    d.recombine = function (j) {
        var g = [], f = [], e = [];
        c.each(j, function (i, k) {
            if (k.parentId === "100000") {
                g.push(k.id);
                e.push(k)
            }
        });
        for (var h = 0; h < g.length; h++) {
            c.each(j, function (i, k) {
                if (g[h] === k.parentId) {
                    f.push(k)
                }
            })
        }
        this.province = e;
        d.whole.call(this);
        return f
    };
    d.whole = function () {
        var f = this, e = [];
        c.each(f.options.dataJson, function (g, h) {
            if (h.id !== "100000" && h.parentId !== "100000") {
                e.push(h)
            }
        });
        f.whole = e
    };
    d.filter = function (f) {
        var e = f;
        e.contain = e.options.whole ? e.whole : e.newCityData;
        f.filterCity = {
            HOT: [],
            A: [],
            B: [],
            C: [],
            D: [],
            E: [],
            F: [],
            G: [],
            H: [],
            I: [],
            J: [],
            K: [],
            L: [],
            M: [],
            N: [],
            O: [],
            P: [],
            Q: [],
            R: [],
            S: [],
            T: [],
            U: [],
            V: [],
            W: [],
            X: [],
            Y: [],
            Z: []
        };
        c.each(e.contain, function (g, h) {
            switch (h.letter) {
                case ("A"):
                    f.filterCity.A.push(h);
                    break;
                case ("B"):
                    f.filterCity.B.push(h);
                    break;
                case ("C"):
                    f.filterCity.C.push(h);
                    break;
                case ("D"):
                    f.filterCity.D.push(h);
                    break;
                case ("E"):
                    f.filterCity.E.push(h);
                    break;
                case ("F"):
                    f.filterCity.F.push(h);
                    break;
                case ("G"):
                    f.filterCity.G.push(h);
                    break;
                case ("H"):
                    f.filterCity.H.push(h);
                    break;
                case ("I"):
                    f.filterCity.I.push(h);
                    break;
                case ("J"):
                    f.filterCity.J.push(h);
                    break;
                case ("K"):
                    f.filterCity.K.push(h);
                    break;
                case ("L"):
                    f.filterCity.L.push(h);
                    break;
                case ("M"):
                    f.filterCity.M.push(h);
                    break;
                case ("N"):
                    f.filterCity.N.push(h);
                    break;
                case ("O"):
                    f.filterCity.O.push(h);
                    break;
                case ("P"):
                    f.filterCity.P.push(h);
                    break;
                case ("Q"):
                    f.filterCity.Q.push(h);
                    break;
                case ("R"):
                    f.filterCity.R.push(h);
                    break;
                case ("S"):
                    f.filterCity.S.push(h);
                    break;
                case ("T"):
                    f.filterCity.T.push(h);
                    break;
                case ("U"):
                    f.filterCity.U.push(h);
                    break;
                case ("V"):
                    f.filterCity.V.push(h);
                    break;
                case ("W"):
                    f.filterCity.W.push(h);
                    break;
                case ("X"):
                    f.filterCity.X.push(h);
                    break;
                case ("Y"):
                    f.filterCity.Y.push(h);
                    break;
                case ("Z"):
                    f.filterCity.Z.push(h);
                    break;
                default:
            }
            if (f.options.hotCity.length < 1 && g < 18) {
                f.filterCity.HOT.push(h)
            } else {
                c.each(f.options.hotCity, function (i, j) {
                    if (j === h.name) {
                        f.filterCity.HOT.push(h)
                    }
                })
            }
        });
        return f.filterCity
    };
    d.montage = function (j, h) {
        var e = this, i = j === 0 ? e.filterCity : j, g = "", f;
        c.each(i, function (k, l) {
            f = e.options.shorthand ? l.shortName : l.name;
            if (j < 1) {
                if (h === k) {
                    c.each(l, function (n, m) {
                        f = e.options.shorthand ? m.shortName : m.name;
                        g += '<a href="javascript:;" class="caller" data-parentid="' + m.parentId + '" data-id="' + m.id + '" data-title="' + f + '" data-letter="' + m.letter + '">' + f + "</a>"
                    })
                }
            } else {
                g += '<li class="caller" data-parentid="' + l.parentId + '" data-id="' + l.id + '" data-title="' + f + '" data-letter="' + l.letter + '">' + '<span class="name">' + f + "</span>" + '<span class="spell">' + l.pinyin + "</span>" + "</li>"
            }
        });
        return g
    };
    d.template = ['<div class="city-pavilion hide">', '<div class="city-tabs">', '<a href="javascript:;" class="tab-a active" data-letter="HOT">热门城市</a>', '<a href="javascript:;" class="tab-a" data-letter="AB">AB</a>', '<a href="javascript:;" class="tab-a" data-letter="CD">CD</a>', '<a href="javascript:;" class="tab-a" data-letter="EFG">EFG</a>', '<a href="javascript:;" class="tab-a" data-letter="HI">HI</a>', '<a href="javascript:;" class="tab-a" data-letter="JK">JK</a>', '<a href="javascript:;" class="tab-a" data-letter="LM">LM</a>', '<a href="javascript:;" class="tab-a" data-letter="NOP">NOP</a>', '<a href="javascript:;" class="tab-a" data-letter="QR">QR</a>', '<a href="javascript:;" class="tab-a" data-letter="S">S</a>', '<a href="javascript:;" class="tab-a" data-letter="TU">TU</a>', '<a href="javascript:;" class="tab-a" data-letter="VWX">VWX</a>', '<a href="javascript:;" class="tab-a" data-letter="Y">Y</a>', '<a href="javascript:;" class="tab-a" data-letter="Z">Z</a>', "</div>", '<div class="city-cont">', "{cont}", "</div>", '<p class="city-txt">', '<a href="javascript:;" class="empty"><i></i>清空</a><span class="city-count"><i>0</i>/{maxnum}</span>', "<em>*可以直接搜索查找城市（支持名称、拼音模糊搜索）</em>", "</p>", "</div>", '<div class="city-info{type}">', "{name}", '<div class="city-input {not}">', '<input type="text" class="input-search" value="" placeholder="{placeholder}" />', "</div>", "</div>", '<ul class="city-list hide"></ul>', '<div class="city-tips hide">最多只能选择<span>{tipnum}</span>项</div>'];
    d.split = function (g) {
        var e = [];
        for (var f = 0; f < g.length; f++) {
            e.push(g[f])
        }
        return e
    };
    d.groupArray = ["HOT", "AB", "CD", "EFG", "HI", "JK", "LM", "NOP", "QR", "S", "TU", "VWX", "Y", "Z"];
    d.showDrop = function (h) {
        var f = this, g = f.options, e = c(h.target);
        if (c(h.currentTarget).hasClass("forbid")) {
            g.onForbid.call(f);
            return false
        }
        if (e.hasClass("del")) {
            d.deletes.call(f, e);
            return false
        }
        f.isfocus = true;
        f.$selector.addClass("down").find(".city-pavilion").removeClass("hide").siblings(".city-list").addClass("hide");
        c(h.currentTarget).find(".input-search").focus();
        d.defSelected.call(f)
    };
    d.tabs = function (h) {
        var e = c(h.target), f = this.options, g = e.data("letter");
        if (e.hasClass("forbid")) {
            f.onTabsForbid.call(self, e);
            return false
        }
        e.addClass("active").siblings().removeClass("active");
        this.$selector.find("dl").addClass("hide").siblings(".city-" + g).removeClass("hide");
        f.onTabsAfter.call(this, e)
    };
    d.singleAchieve = function (i) {
        var e = c(i.currentTarget), l = this.$selector.find(".input-search"), h = this.$selector.find(".city-info"),
            g = this.options, k = e.attr("data-parentid"), j = e.attr("data-id"), f = e.data("title");
        this.values = [];
        this.values.push({"name": f, "id": j, "parentId": k});
        this.$selector.find(".caller").removeClass("active");
        this.$selector.find('.caller[data-id="' + j + '"]').addClass("active");
        h.find("span").remove();
        this.$selector.find(".city-input").before('<span data-id="' + j + '" data-parentid="' + k + '">' + f + '<i class="del"></i></span>').find(".input-search").val("");
        d.singleResize.call(this);
        this.$selector.removeClass("down").find(".city-pavilion, .city-list").addClass("hide");
        if (!this.options.search && this.values.length > 0) {
            this.$selector.find(".city-input").addClass("hide")
        }
        g.onCallerAfter.call(this, e, this.values[0])
    };
    d.multiAchieve = function (h) {
        var q = this, p = q.$selector, j = c(h.currentTarget), n = p.find(".input-search"), k = q.options,
            m = j.attr("data-parentid"), i = j.attr("data-id"), g = j.data("title"), f = n.val(),
            l = j.hasClass("active"), e, o;
        if (!l) {
            if (q.selectIndex >= k.multiMaximum) {
                p.find(".city-tips").removeClass("hide");
                setTimeout(function () {
                    p.find(".city-tips").addClass("hide")
                }, 1000);
                return false
            }
            if (c.inArray(g, q.multiSelectResult) < 0) {
                q.multiSelectResult.push(g);
                q.multiSelectResultId.push(i);
                q.provinceId.push(m);
                e = '<span data-id="' + i + '" data-parentid="' + m + '">' + g + '<i class="del"></i></span>';
                p.find('.caller[data-id="' + i + '"]').addClass("active");
                if (k.multiType < 1) {
                    p.find(".city-input").before(e)
                }
                q.selectIndex += 1
            }
        } else {
            q.multiSelectResult.splice(c.inArray(g, q.multiSelectResult), 1);
            q.multiSelectResultId.splice(c.inArray(i, q.multiSelectResultId), 1);
            q.provinceId.splice(c.inArray(m, q.provinceId), 1);
            p.find('.caller[data-id="' + i + '"]').removeClass("active");
            p.find(".city-info").find('span[data-id="' + i + '"]').remove();
            q.selectIndex -= 1
        }
        q.values = [];
        q.multiSelectResult.length > 0 ? q.values.push({
            "name": q.multiSelectResult,
            "id": q.multiSelectResultId,
            "parentId": q.provinceId
        }) : "";
        o = q.multiSelectResult.join(k.mosaic);
        if (k.multiType === 1) {
            p.find(".city-name").html('<span class="span-over" title="' + o + '">' + o + "</span>")
        }
        if (q.selectIndex < 1) {
            p.find(".city-input").addClass("not-val");
            p.find(".span-over").remove()
        } else {
            p.find(".city-input").removeClass("not-val")
        }
        p.find(".city-count").find("i").text(q.selectIndex);
        k.onCallerAfter.call(q, j, q.values[0])
    };
    d.search = function (k) {
        var h = this, g = c(k.target), i = this.options, l = k.keyCode, j = g.val(), f = [], e;
        if (l === 16 || l === 17 || l === 18 || l === 37 || l === 39 || l === 91 || l === 93) {
            return false
        }
        if (l !== 13 && l !== 38 && l !== 40) {
            h.isfocus = false;
            c.each(h.contain, function (m, n) {
                if (n.pinyin.toLocaleLowerCase().search(j.toLocaleLowerCase()) > -1 || n.name.search(j) > -1 || n.id.search(j) > -1) {
                    f.push(n)
                }
            });
            e = f.length > 0 ? d.montage.call(h, f) : '<li class="not-have">没有找到<strong>' + j + "</strong>相关城市</li>";
            h.$selector.find(".city-list").html(e);
            d.defSelected.call(h);
            d.searchShow.call(h)
        }
        return false
    };
    d.searchShow = function (e) {
        this.$selector.addClass("down").find(".city-pavilion").addClass("hide");
        this.$selector.find(".city-input").addClass("search-show");
        this.$selector.find(".city-list").removeClass("hide")
    };
    d.defSelected = function (f) {
        var e = this;
        if (e.values.length > 0) {
            if (e.values[0].id instanceof Array) {
                c.each(e.values[0].id, function (g, h) {
                    e.$selector.find('.caller[data-id="' + h + '"]').addClass("active")
                })
            } else {
                e.$selector.find('.caller[data-id="' + e.values[0].id + '"]').addClass("active")
            }
        }
    };
    d.operation = function (f) {
        var o = this, m = o.$selector, l = m.find(".city-list"), g = c(f.target), i = l.find(".caller"),
            j = l.find("li").hasClass("not-have"), n = f.keyCode, h = 0, k, e;
        if (n === 13) {
            l.find(".caller.hover").trigger("click");
            return false
        }
        if (n === 38 || n === 40) {
            k = n === 38 ? -1 : 1;
            e = i.index(l.find(".caller.hover"));
            if (e < 0) {
                h = k > 0 ? -1 : 0
            } else {
                h = e
            }
            h = h + k;
            h = h === i.length ? 0 : h;
            i.removeClass("hover").eq(h).addClass("hover");
            if (!j) {
                d.scroll.call(o)
            }
            return false
        }
    };
    d.scroll = function (j) {
        var g = this, i = g.$selector.find(".city-list"), e = i.find(".caller.hover"), k = i.outerHeight(),
            h = e.outerHeight() + 1, f = e.position().top, l = i.scrollTop();
        i.animate({scrollTop: f + h - k + l}, 200)
    };
    d.singleResize = function () {
        var f = this, j = f.$selector, h = j.find(".city-info"), i = h.outerWidth(), e = h.innerWidth() - h.width(),
            g = h.find("span").outerWidth(true);
        j.find(".city-input").width(i - g - e - 2)
    };
    d.multiResize = function () {
        var e = this, g = e.$selector, f = g.outerHeight(true) - 1;
        g.find(".city-pavilion, .city-list").animate({"top": f}, 10)
    };
    d.forbid = function () {
        var e = this;
        c.each(e.$selector.find(".city-cont").find("dl"), function (f, g) {
            var i = c(g), h = i.data("letter");
            if (!c(g).text()) {
                e.$selector.find('.tab-a[data-letter="' + h + '"]').addClass("forbid")
            }
        })
    };
    d.deletes = function (i) {
        var f = this, e = i, h = e.parent(), g = h[0].innerText, k = h.attr("data-id"), j = h.data("parentid");
        f.multiSelectResult.splice(c.inArray(g, f.multiSelectResult), 1);
        f.multiSelectResultId.splice(c.inArray(k, f.multiSelectResultId), 1);
        f.provinceId.splice(c.inArray(j, f.provinceId), 1);
        f.values = [];
        f.multiSelectResult.length > 0 ? f.values.push({
            "name": f.multiSelectResult,
            "id": f.multiSelectResultId,
            "parentId": f.provinceId
        }) : "";
        h.remove();
        f.$selector.find('.caller[data-id="' + k + '"]').removeClass("active");
        if (f.options.multiSelect) {
            f.selectIndex -= 1;
            f.$selector.find(".city-count").find("i").text(f.selectIndex);
            f.values.length < 1 ? f.$selector.find(".city-input").addClass("not-val") : ""
        } else {
            d.singleResize.call(f)
        }
    };
    b.prototype.init = function () {
        var e = this, f = this.options;
        e.newCityData = f.convert ? d.recombine.call(e, f.dataJson) : f.dataJson;
        d.filter(e);
        e.createSubject();
        e.bindEvent();
        f.onInit.call(e)
    };
    b.prototype.groupCity = function () {
        var n = this, o = "", f, m, l, e, k;
        for (var h = 0; h < d.groupArray.length; h++) {
            m = d.groupArray[h];
            f = m !== "HOT" ? d.split(m) : "";
            k = h > 0 ? " hide" : "";
            o += '<dl class="city-' + m + k + '" data-letter="' + m + '">{dl}</dl>';
            if (f && f.length > 1) {
                l = "";
                for (var g = 0; g < f.length; g++) {
                    e = d.montage.call(n, 0, f[g]);
                    if (e) {
                        l += "<dt>" + f[g] + "</dt>" + "<dd>" + e + "</dd>"
                    }
                }
            } else {
                e = d.montage.call(n, 0, m);
                if (e) {
                    l = m !== "HOT" ? "<dt>" + m + "</dt>" + "<dd>" + d.montage.call(n, 0, m) + "</dd>" : "<dd>" + d.montage.call(n, 0, m) + "</dd>"
                }
            }
            o = o.replace("{dl}", l)
        }
        return o
    };
    b.prototype.createSubject = function () {
        var e = this, f = e.options, g = d.template.join("");
        g = g.replace("{placeholder}", f.searchPlaceholder);
        g = g.replace("{maxnum}", f.multiMaximum);
        g = g.replace("{tipnum}", f.multiMaximum);
        g = g.replace("{type}", f.multiType === 1 ? " multi-type" : "");
        g = g.replace("{name}", f.multiType === 1 ? '<div class="city-name"></div>' : "");
        f.multiSelect ? e.$selector.addClass("multi") : "";
        g = g.replace("{not}", "not-val not-search");
        e.$selector.html(g.replace("{cont}", e.groupCity()));
        !f.multiSelect ? e.$selector.find(".city-count").html("") : "";
        if (!f.search) {
            e.$selector.find(".city-input").addClass("not-search").html("<em>" + f.placeholder + "</em>");
            e.$selector.find(".city-txt").find("em").remove()
        } else {
            e.$selector.find(".city-input").removeClass("not-search")
        }
        d.forbid.call(e)
    };
    b.prototype.bindEvent = function (g) {
        var e = this, f = e.options, h = e.$selector;
        h.on("click.cityselect", ".city-info", c.proxy(d.showDrop, e));
        h.on("click.cityselect", ".tab-a", c.proxy(d.tabs, e));
        h.on("click.cityselect", ".caller", c.proxy(f.multiSelect ? d.multiAchieve : d.singleAchieve, e));
        h.on("click.cityselect", ".empty", c.proxy(e.clear, e));
        h.on("keyup.cityselect", ".input-search", c.proxy(d.search, e));
        h.on("keydown.cityselect", c.proxy(d.operation, e))
    };
    b.prototype.unBindEvent = function (f) {
        var e = this, g = e.$selector;
        g.off("click.cityselect", ".city-info");
        g.off("click.cityselect", ".tab-a");
        g.off("click.cityselect", ".caller");
        g.off("click.cityselect", ".empty");
        g.off("keyup.cityselect", ".input-search");
        g.off("keydown.cityselect")
    };
    b.prototype.setCityVal = function (g) {
        var n = this, h = n.options, m = g.replace(/\s/g, ""), k = m.split(","), f, e, l;
        if (g) {
            n.cityVal = g;
            !h.multiSelect ? k = k.splice(0, 1) : k = k.splice(0, h.multiMaximum);
            for (var j = 0; j < k.length; j++) {
                c.each(n.newCityData, function (i, o) {
                    f = n.options.shorthand ? o.shortName : o.name;
                    if (k[j] === o.name) {
                        n.multiSelectResult.push(f);
                        n.multiSelectResultId.push(o.id);
                        n.provinceId.push(o.parentId);
                        n.$selector.find('.caller[data-id="' + o.id + '"]').addClass("active");
                        e = '<span data-id="' + o.id + '" data-parentid="' + o.parentId + '">' + f + '<i class="del"></i></span>';
                        if (h.multiType < 1) {
                            n.$selector.find(".city-input").before(e)
                        }
                    }
                });
                if (n.options.multiSelect) {
                    n.selectIndex = j + 1;
                    n.$selector.find(".city-count").find("i").text(j + 1)
                }
            }
            n.values = [];
            n.multiSelectResult.length > 0 ? n.values.push({
                "name": n.multiSelectResult,
                "id": n.multiSelectResultId,
                "parentId": n.provinceId
            }) : "";
            l = n.multiSelectResult.join(h.mosaic);
            if (h.multiType === 1) {
                n.$selector.find(".city-name").html('<span class="span-over" title="' + l + '">' + l + "</span>")
            }
            n.values.length > 0 ? n.$selector.find(".city-input").removeClass("not-val") : ""
        }
    };
    b.prototype.getCityVal = function () {
        return this.values[0]
    };
    b.prototype.update = function (g) {
        var e = this, f = d.template.join("");
        if (g.length > 0) {
            e.newCityData = g;
            d.filter(e);
            e.createSubject();
            e.cityVal ? e.setCityVal(e.cityVal) : ""
        }
    };
    b.prototype.clear = function () {
        this.multiSelectResult = [];
        this.multiSelectResultId = [];
        this.provinceId = [];
        this.values = [];
        this.selectIndex = 0;
        this.isfocus ? this.$selector.find(".input-search").val("").focus() : "";
        this.$selector.find(".caller").removeClass("active");
        this.$selector.find(".city-count").find("i").text("0");
        this.$selector.find(".city-info").find("span").remove();
        if (this.values.length < 1) {
            this.$selector.find(".city-input").removeClass("hide").addClass("not-val")
        }
    };
    b.prototype.status = function (e) {
        var f = this, g = f.$selector.find(".city-info");
        if (e === "disabled") {
            f.$selector.addClass("disabled").find(".input-search").prop("disabled", true);
            f.unBindEvent()
        } else {
            if (e === "readonly") {
                f.$selector.addClass("readonly").find(".input-search").prop("readonly", true);
                f.unBindEvent()
            }
        }
    };
    c(document).on("click.cityselect", function (e) {
        var f = c(".city-select");
        if (f.find(e.target).length < 1) {
            f.removeClass("down").find(".city-pavilion, .city-list").addClass("hide");
            f.find(".city-input").removeClass("search-show").find(".input-search").val("")
        }
    });
    c.fn.citySelect = function (e) {
        return new b(e, this)
    }
})(jQuery, window);